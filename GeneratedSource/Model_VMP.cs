// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2403.801 at 18:52 on Thursday 8 August 2024.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vdouble__4_vint__0_vint__1 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vdouble__4_vint__0_vint__1</summary>
		public bool Changed_numberOfIterations_vdouble__4_vint__0_vint__1_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isInitialised;
		/// <summary>True if Changed_vdouble__4 has executed. Set this to false to force re-execution of Changed_vdouble__4</summary>
		public bool Changed_vdouble__4_isDone;
		/// <summary>True if Changed_vint__0 has executed. Set this to false to force re-execution of Changed_vint__0</summary>
		public bool Changed_vint__0_isDone;
		/// <summary>True if Changed_vint__1 has executed. Set this to false to force re-execution of Changed_vint__1</summary>
		public bool Changed_vint__1_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message to marginal of 'vdouble__0'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__0_marginal_F;
		/// <summary>Message to marginal of 'vdouble__1'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1_marginal_F;
		/// <summary>Message from use of 'vdouble__1'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__1_use_B;
		/// <summary>Field backing the vdouble__4 property</summary>
		private double[] vdouble__4_field;
		/// <summary>Message to marginal of 'vdouble__4'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__4_marginal_F;
		/// <summary>Field backing the vint__0 property</summary>
		private int[] vint__0_field;
		/// <summary>Message to marginal of 'vint__0'</summary>
		public PointMass<int[]> vint__0_marginal_F;
		/// <summary>Field backing the vint__1 property</summary>
		private int[] vint__1_field;
		/// <summary>Message to marginal of 'vint__1'</summary>
		public PointMass<int[]> vint__1_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__4'</summary>
		public double[] vdouble__4
		{
			get {
				return this.vdouble__4_field;
			}
			set {
				if ((value!=null)&&(value.Length!=495000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+495000)+" was expected for variable \'vdouble__4\'");
				}
				this.vdouble__4_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__4_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__4_vint__0_vint__1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint__0'</summary>
		public int[] vint__0
		{
			get {
				return this.vint__0_field;
			}
			set {
				if ((value!=null)&&(value.Length!=495000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+495000)+" was expected for variable \'vint__0\'");
				}
				this.vint__0_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint__0_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__4_vint__0_vint__1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint__1'</summary>
		public int[] vint__1
		{
			get {
				return this.vint__1_field;
			}
			set {
				if ((value!=null)&&(value.Length!=495000)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+495000)+" was expected for variable \'vint__1\'");
				}
				this.vint__1_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vint__1_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__4_vint__0_vint__1_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vdouble__4 and vint__0 and vint__1</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vdouble__4_vint__0_vint__1(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vdouble__4_vint__0_vint__1_isDone) {
				return ;
			}
			Gaussian vdouble__0_F_reduced;
			Gaussian vdouble__1_F_reduced;
			// Create array for 'vdouble__0_marginal' Forwards messages.
			this.vdouble__0_marginal_F = new DistributionStructArray<Gaussian,double>(5000);
			for(int index0 = 0; index0<5000; index0++) {
				this.vdouble__0_marginal_F[index0] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> vdouble__0_use_B;
			// Create array for 'vdouble__0_use' Backwards messages.
			vdouble__0_use_B = new DistributionStructArray<Gaussian,double>(5000);
			for(int index0 = 0; index0<5000; index0++) {
				vdouble__0_use_B[index0] = Gaussian.Uniform();
			}
			// Message to 'vdouble__0' from GaussianFromMeanAndVariance factor
			vdouble__0_F_reduced = GaussianFromMeanAndVarianceOp.SampleAverageLogarithm(0.0, 1.0);
			// Message to 'vdouble__1' from GaussianFromMeanAndVariance factor
			vdouble__1_F_reduced = GaussianFromMeanAndVarianceOp.SampleAverageLogarithm(0.0, 1.0);
			DistributionStructArray<Gaussian,double> vdouble__0_itemvint__0_index2__F;
			// Create array for 'vdouble__0_itemvint__0_index2_' Forwards messages.
			vdouble__0_itemvint__0_index2__F = new DistributionStructArray<Gaussian,double>(495000);
			for(int index2 = 0; index2<495000; index2++) {
				vdouble__0_itemvint__0_index2__F[index2] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble15_B'
			Gaussian[] vdouble15_B = new Gaussian[495000];
			for(int index2 = 0; index2<495000; index2++) {
				vdouble15_B[index2] = Gaussian.Uniform();
				// Message to 'vdouble15' from GaussianFromMeanAndVariance factor
				vdouble15_B[index2] = GaussianFromMeanAndVarianceOp.MeanAverageLogarithm(this.vdouble__4[index2], 0.10000000000000001);
			}
			DistributionStructArray<Gaussian,double> vdouble__1_itemvint__1_index2__B;
			// Create array for 'vdouble__1_itemvint__1_index2_' Backwards messages.
			vdouble__1_itemvint__1_index2__B = new DistributionStructArray<Gaussian,double>(495000);
			for(int index2 = 0; index2<495000; index2++) {
				vdouble__1_itemvint__1_index2__B[index2] = Gaussian.Uniform();
			}
			// Create array for 'vdouble__1_marginal' Forwards messages.
			this.vdouble__1_marginal_F = new DistributionStructArray<Gaussian,double>(99);
			for(int index1 = 0; index1<99; index1++) {
				this.vdouble__1_marginal_F[index1] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> vdouble__1_itemvint__1_index2__F;
			// Create array for 'vdouble__1_itemvint__1_index2_' Forwards messages.
			vdouble__1_itemvint__1_index2__F = new DistributionStructArray<Gaussian,double>(495000);
			for(int index2 = 0; index2<495000; index2++) {
				vdouble__1_itemvint__1_index2__F[index2] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> vdouble__0_itemvint__0_index2__B;
			// Create array for 'vdouble__0_itemvint__0_index2_' Backwards messages.
			vdouble__0_itemvint__0_index2__B = new DistributionStructArray<Gaussian,double>(495000);
			for(int index2 = 0; index2<495000; index2++) {
				vdouble__0_itemvint__0_index2__B[index2] = Gaussian.Uniform();
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				for(int index1 = 0; index1<99; index1++) {
					// Message to 'vdouble__1_marginal' from Variable factor
					this.vdouble__1_marginal_F[index1] = VariableVmpOp<double>.MarginalAverageLogarithm<Gaussian>(this.vdouble__1_use_B[index1], vdouble__1_F_reduced, this.vdouble__1_marginal_F[index1]);
				}
				for(int index2 = 0; index2<495000; index2++) {
					// Message to 'vdouble__1_itemvint__1_index2_' from GetItems factor
					vdouble__1_itemvint__1_index2__F[index2] = GetItemsOp<double>.ItemsAverageLogarithm<Gaussian>(this.vdouble__1_marginal_F, this.vint__1, index2, vdouble__1_itemvint__1_index2__F[index2]);
					// Message to 'vdouble__0_itemvint__0_index2_' from Plus factor
					vdouble__0_itemvint__0_index2__B[index2] = DoublePlusVmpOp.AAverageLogarithm(vdouble15_B[index2], vdouble__1_itemvint__1_index2__F[index2]);
				}
				// Message to 'vdouble__0_use' from GetItems factor
				vdouble__0_use_B = GetItemsOp<double>.ArrayAverageLogarithm<Gaussian,DistributionStructArray<Gaussian,double>>(vdouble__0_itemvint__0_index2__B, this.vint__0, vdouble__0_use_B);
				for(int index0 = 0; index0<5000; index0++) {
					// Message to 'vdouble__0_marginal' from Variable factor
					this.vdouble__0_marginal_F[index0] = VariableVmpOp<double>.MarginalAverageLogarithm<Gaussian>(vdouble__0_use_B[index0], vdouble__0_F_reduced, this.vdouble__0_marginal_F[index0]);
				}
				for(int index2 = 0; index2<495000; index2++) {
					// Message to 'vdouble__0_itemvint__0_index2_' from GetItems factor
					vdouble__0_itemvint__0_index2__F[index2] = GetItemsOp<double>.ItemsAverageLogarithm<Gaussian>(this.vdouble__0_marginal_F, this.vint__0, index2, vdouble__0_itemvint__0_index2__F[index2]);
					// Message to 'vdouble__1_itemvint__1_index2_' from Plus factor
					vdouble__1_itemvint__1_index2__B[index2] = DoublePlusVmpOp.BAverageLogarithm(vdouble15_B[index2], vdouble__0_itemvint__0_index2__F[index2]);
				}
				// Message to 'vdouble__1_use' from GetItems factor
				this.vdouble__1_use_B = GetItemsOp<double>.ArrayAverageLogarithm<Gaussian,DistributionStructArray<Gaussian,double>>(vdouble__1_itemvint__1_index2__B, this.vint__1, this.vdouble__1_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index1 = 0; index1<99; index1++) {
				// Message to 'vdouble__1_marginal' from Variable factor
				this.vdouble__1_marginal_F[index1] = VariableVmpOp<double>.MarginalAverageLogarithm<Gaussian>(this.vdouble__1_use_B[index1], vdouble__1_F_reduced, this.vdouble__1_marginal_F[index1]);
			}
			this.Changed_numberOfIterations_vdouble__4_vint__0_vint__1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vdouble__4 and vint__0 and vint__1</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isInitialised)) {
				return ;
			}
			for(int index1 = 0; index1<99; index1++) {
				this.vdouble__1_use_B[index1] = Gaussian.Uniform();
			}
			this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__4</summary>
		private void Changed_vdouble__4()
		{
			if (this.Changed_vdouble__4_isDone) {
				return ;
			}
			// Create array for 'vdouble__4_marginal' Forwards messages.
			this.vdouble__4_marginal_F = new DistributionStructArray<Gaussian,double>(495000);
			for(int index2 = 0; index2<495000; index2++) {
				this.vdouble__4_marginal_F[index2] = Gaussian.Uniform();
			}
			// Message to 'vdouble__4_marginal' from DerivedVariableVmp factor
			this.vdouble__4_marginal_F = DerivedVariableVmpOp<double[]>.MarginalAverageLogarithm<DistributionStructArray<Gaussian,double>,double[]>(this.vdouble__4, this.vdouble__4_marginal_F);
			this.Changed_vdouble__4_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint__0</summary>
		private void Changed_vint__0()
		{
			if (this.Changed_vint__0_isDone) {
				return ;
			}
			// Create array for 'vint__0_marginal' Forwards messages.
			this.vint__0_marginal_F = new PointMass<int[]>(this.vint__0);
			// Message to 'vint__0_marginal' from DerivedVariableVmp factor
			this.vint__0_marginal_F = DerivedVariableVmpOp<int[]>.MarginalAverageLogarithm<PointMass<int[]>,int[]>(this.vint__0, this.vint__0_marginal_F);
			this.Changed_vint__0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint__1</summary>
		private void Changed_vint__1()
		{
			if (this.Changed_vint__1_isDone) {
				return ;
			}
			// Create array for 'vint__1_marginal' Forwards messages.
			this.vint__1_marginal_F = new PointMass<int[]>(this.vint__1);
			// Message to 'vint__1_marginal' from DerivedVariableVmp factor
			this.vint__1_marginal_F = DerivedVariableVmpOp<int[]>.MarginalAverageLogarithm<PointMass<int[]>,int[]>(this.vint__1, this.vint__1_marginal_F);
			this.Changed_vint__1_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'vdouble__1_use' Backwards messages.
			this.vdouble__1_use_B = new DistributionStructArray<Gaussian,double>(99);
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1_isDone = false;
				}
				this.Changed_numberOfIterations_vdouble__4_vint__0_vint__1_isDone = false;
			}
			this.Changed_vdouble__4();
			this.Changed_vint__1();
			this.Changed_vint__0();
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_vdouble__4_vint__0_vint__1(initialise);
			this.Changed_numberOfIterations_vdouble__4_vint__0_vint__1(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vint__0") {
				return this.vint__0;
			}
			if (variableName=="vint__1") {
				return this.vint__1;
			}
			if (variableName=="vdouble__4") {
				return this.vdouble__4;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__4") {
				return this.Vdouble__4Marginal();
			}
			if (variableName=="vint__1") {
				return this.Vint__1Marginal();
			}
			if (variableName=="vint__0") {
				return this.Vint__0Marginal();
			}
			if (variableName=="vdouble__0") {
				return this.Vdouble__0Marginal();
			}
			if (variableName=="vdouble__1") {
				return this.Vdouble__1Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vint__0") {
				this.vint__0 = (int[])value;
				return ;
			}
			if (variableName=="vint__1") {
				this.vint__1 = (int[])value;
				return ;
			}
			if (variableName=="vdouble__4") {
				this.vdouble__4 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__0Marginal()
		{
			return this.vdouble__0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__1Marginal()
		{
			return this.vdouble__1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__4' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__4Marginal()
		{
			return this.vdouble__4_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Vint__0Marginal()
		{
			return this.vint__0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> Vint__1Marginal()
		{
			return this.vint__1_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
