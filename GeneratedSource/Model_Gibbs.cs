// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Math;
using Microsoft.ML.Probabilistic.Collections;
using Microsoft.ML.Probabilistic.Factors;
using System.Collections.Generic;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2403.801 at 18:07 on Thursday 8 August 2024.
	/// </remarks>
	public partial class Model_Gibbs : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vdouble___0 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vdouble___0</summary>
		public bool Changed_numberOfIterations_vdouble___0_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble___0 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble___0</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble___0_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble___0 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble___0</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble___0_isInitialised;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Message from marginal of 'vdouble____0'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble____0_marginal_B;
		/// <summary>Message to marginal of 'vdouble____0'</summary>
		public GibbsMarginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> vdouble____0_marginal_F;
		/// <summary>Field backing the vdouble___0 property</summary>
		private double[,] vdouble___0_field;
		/// <summary>Message from marginal of 'vdouble___0'</summary>
		public DistributionStructArray2D<Gaussian,double> vdouble___0_marginal_B;
		/// <summary>Message to marginal of 'vdouble___0'</summary>
		public GibbsMarginal<DistributionStructArray2D<Gaussian,double>,double[,]> vdouble___0_marginal_F;
		/// <summary>Message from marginal of 'vVector__0'</summary>
		public DistributionRefArray<VectorGaussian,Vector> vVector__0_marginal_B;
		/// <summary>Message to marginal of 'vVector__0'</summary>
		public GibbsMarginal<DistributionRefArray<VectorGaussian,Vector>,Vector[]> vVector__0_marginal_F;
		/// <summary>Message from marginal of 'vVector__1'</summary>
		public DistributionRefArray<VectorGaussian,Vector> vVector__1_marginal_B;
		/// <summary>Message to marginal of 'vVector__1'</summary>
		public GibbsMarginal<DistributionRefArray<VectorGaussian,Vector>,Vector[]> vVector__1_marginal_F;
		/// <summary>Messages from uses of 'vVector__1'</summary>
		public DistributionRefArray<VectorGaussian,Vector>[] vVector__1_uses_B;
		/// <summary>The constant 'vVector2'</summary>
		public DenseVector vVector2;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vdouble___0'</summary>
		public double[,] vdouble___0
		{
			get {
				return this.vdouble___0_field;
			}
			set {
				if ((value!=null)&&((value.GetLength(0)!=5000)||(value.GetLength(1)!=99))) {
					throw new ArgumentException(((("Provided array of size "+(((("("+value.GetLength(0))+",")+value.GetLength(1))+")"))+" when size ")+(((("("+5000)+",")+99)+")"))+" was expected");
				}
				this.vdouble___0_field = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_Init_vdouble___0_isInitialised = false;
				this.Changed_numberOfIterations_vdouble___0_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vdouble___0</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vdouble___0(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vdouble___0_isDone) {
				return ;
			}
			Vector[][] vVector__0_uses_F;
			DistributionRefArray<VectorGaussian,Vector>[] vVector__0_uses_B;
			// Create array for 'vVector__0_uses' Forwards messages.
			vVector__0_uses_F = new Vector[1][];
			// Create array for 'vVector__0_uses' Backwards messages.
			vVector__0_uses_B = new DistributionRefArray<VectorGaussian,Vector>[1];
			// Create array for 'vVector__0_uses' Forwards messages.
			vVector__0_uses_F[0] = new Vector[5000];
			// Create array for 'vVector__0_uses' Backwards messages.
			vVector__0_uses_B[0] = new DistributionRefArray<VectorGaussian,Vector>(5000);
			for(int index0 = 0; index0<5000; index0++) {
				vVector__0_uses_B[0][index0] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
			}
			DistributionRefArray<VectorGaussian,Vector> vVector__0_F;
			VectorGaussian vVector__0_F_reduced;
			// Create array for 'vVector__0' Forwards messages.
			vVector__0_F = new DistributionRefArray<VectorGaussian,Vector>(5000);
			vVector__0_F_reduced = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
			PositiveDefiniteMatrix vPositiveDefiniteMatrix0 = new PositiveDefiniteMatrix(new double[10, 10] { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }, { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } });
			// Message to 'vVector__0' from VectorGaussian factor
			vVector__0_F_reduced = VectorGaussianOp.SampleAverageConditional(this.vVector2, vPositiveDefiniteMatrix0, vVector__0_F_reduced);
			for(int index0 = 0; index0<5000; index0++) {
				vVector__0_F[index0] = vVector__0_F_reduced;
				vVector__0_F[index0] = vVector__0_F_reduced;
			}
			VectorGaussian vVector__1_F_reduced;
			vVector__1_F_reduced = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
			DistributionRefArray<VectorGaussian,Vector> vVector__1_F;
			// Create array for 'vVector__1' Forwards messages.
			vVector__1_F = new DistributionRefArray<VectorGaussian,Vector>(99);
			// Message to 'vVector__1' from VectorGaussian factor
			vVector__1_F_reduced = VectorGaussianOp.SampleAverageConditional(this.vVector2, vPositiveDefiniteMatrix0, vVector__1_F_reduced);
			for(int index1 = 0; index1<99; index1++) {
				vVector__1_F[index1] = vVector__1_F_reduced;
				vVector__1_F[index1] = vVector__1_F_reduced;
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[] vdouble____0_uses_B;
			// Create array for 'vdouble____0_uses' Backwards messages.
			vdouble____0_uses_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>[1];
			// Create array for 'vdouble____0_uses' Backwards messages.
			vdouble____0_uses_B[0] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(5000);
			for(int index0 = 0; index0<5000; index0++) {
				// Create array for 'vdouble____0_uses' Backwards messages.
				vdouble____0_uses_B[0][index0] = new DistributionStructArray<Gaussian,double>(99);
				for(int index1 = 0; index1<99; index1++) {
					vdouble____0_uses_B[0][index0][index1] = Gaussian.Uniform();
					// Message to 'vdouble____0_uses' from Gaussian factor
					vdouble____0_uses_B[0][index0][index1] = GaussianOpBase.MeanAverageConditional(this.vdouble___0[index0, index1], 1.0);
				}
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> vdouble____0_B;
			// Create array for 'vdouble____0' Backwards messages.
			vdouble____0_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(5000);
			for(int index0 = 0; index0<5000; index0++) {
				// Create array for 'vdouble____0' Backwards messages.
				vdouble____0_B[index0] = new DistributionStructArray<Gaussian,double>(99);
				for(int index1 = 0; index1<99; index1++) {
					vdouble____0_B[index0][index1] = Gaussian.Uniform();
				}
			}
			// Message to 'vdouble____0' from ReplicateWithMarginal factor
			vdouble____0_B = ReplicateGibbsOp<double[][]>.DefGibbs<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(vdouble____0_uses_B, vdouble____0_B);
			// Create array for replicates of 'vVector__1_rep_uses_B'
			DistributionRefArray<VectorGaussian,Vector>[][] vVector__1_rep_uses_B = new DistributionRefArray<VectorGaussian,Vector>[99][];
			for(int index1 = 0; index1<99; index1++) {
				// Create array for 'vVector__1_rep_uses' Backwards messages.
				vVector__1_rep_uses_B[index1] = new DistributionRefArray<VectorGaussian,Vector>[1];
				// Create array for 'vVector__1_rep_uses' Backwards messages.
				vVector__1_rep_uses_B[index1][0] = new DistributionRefArray<VectorGaussian,Vector>(5000);
			}
			for(int index0 = 0; index0<5000; index0++) {
				for(int index1 = 0; index1<99; index1++) {
					vVector__1_rep_uses_B[index1][0][index0] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
				}
			}
			// Create array for replicates of 'vVector__1_rep_B'
			DistributionRefArray<VectorGaussian,Vector>[] vVector__1_rep_B = new DistributionRefArray<VectorGaussian,Vector>[99];
			for(int index1 = 0; index1<99; index1++) {
				// Create array for 'vVector__1_rep' Backwards messages.
				vVector__1_rep_B[index1] = new DistributionRefArray<VectorGaussian,Vector>(5000);
			}
			for(int index0 = 0; index0<5000; index0++) {
				for(int index1 = 0; index1<99; index1++) {
					vVector__1_rep_B[index1][index0] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
				}
			}
			Vector[][] vVector__1_uses_F;
			// Create array for 'vVector__1_uses' Forwards messages.
			vVector__1_uses_F = new Vector[1][];
			// Create array for 'vVector__1_uses' Forwards messages.
			vVector__1_uses_F[0] = new Vector[99];
			// Create array for replicates of 'vVector__0_rep_uses_B'
			DistributionRefArray<VectorGaussian,Vector>[][] vVector__0_rep_uses_B = new DistributionRefArray<VectorGaussian,Vector>[5000][];
			for(int index0 = 0; index0<5000; index0++) {
				// Create array for 'vVector__0_rep_uses' Backwards messages.
				vVector__0_rep_uses_B[index0] = new DistributionRefArray<VectorGaussian,Vector>[1];
				// Create array for 'vVector__0_rep_uses' Backwards messages.
				vVector__0_rep_uses_B[index0][0] = new DistributionRefArray<VectorGaussian,Vector>(99);
				for(int index1 = 0; index1<99; index1++) {
					vVector__0_rep_uses_B[index0][0][index1] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
				}
			}
			// Create array for replicates of 'vVector__0_rep_B'
			DistributionRefArray<VectorGaussian,Vector>[] vVector__0_rep_B = new DistributionRefArray<VectorGaussian,Vector>[5000];
			for(int index0 = 0; index0<5000; index0++) {
				// Create array for 'vVector__0_rep' Backwards messages.
				vVector__0_rep_B[index0] = new DistributionRefArray<VectorGaussian,Vector>(99);
				for(int index1 = 0; index1<99; index1++) {
					vVector__0_rep_B[index0][index1] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
				}
			}
			double[][] vdouble____0_F;
			// Create array for 'vdouble____0' Forwards messages.
			vdouble____0_F = new double[5000][];
			for(int index0 = 0; index0<5000; index0++) {
				// Create array for 'vdouble____0' Forwards messages.
				vdouble____0_F[index0] = new double[99];
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'vVector__1_marginal' from UsesEqualDef factor
				this.vVector__1_marginal_F = UsesEqualDefGibbsOp<Vector[]>.MarginalGibbs<DistributionRefArray<VectorGaussian,Vector>>(this.vVector__1_uses_B, vVector__1_F, this.vVector__1_marginal_F);
				// Message to 'vVector__1_uses' from UsesEqualDef factor
				vVector__1_uses_F[0] = UsesEqualDefGibbsOp<Vector[]>.UsesGibbs<DistributionRefArray<VectorGaussian,Vector>>(this.vVector__1_marginal_F, 0, vVector__1_uses_F[0]);
				for(int index0 = 0; index0<5000; index0++) {
					for(int index1 = 0; index1<99; index1++) {
						// Message to 'vVector__0_rep_uses' from InnerProduct factor
						vVector__0_rep_uses_B[index0][0][index1] = InnerProductOpBase.AAverageConditional(vdouble____0_B[index0][index1], vVector__1_uses_F[0][index1], vVector__0_rep_uses_B[index0][0][index1]);
					}
					// Message to 'vVector__0_rep' from ReplicateWithMarginal factor
					vVector__0_rep_B[index0] = ReplicateGibbsOp<Vector[]>.DefGibbs<DistributionRefArray<VectorGaussian,Vector>>(vVector__0_rep_uses_B[index0], vVector__0_rep_B[index0]);
					// Message to 'vVector__0_uses' from Replicate factor
					vVector__0_uses_B[0][index0] = ReplicateOp_NoDivide.DefAverageConditional<VectorGaussian>(vVector__0_rep_B[index0], vVector__0_uses_B[0][index0]);
				}
				// Message to 'vVector__0_marginal' from UsesEqualDef factor
				this.vVector__0_marginal_F = UsesEqualDefGibbsOp<Vector[]>.MarginalGibbs<DistributionRefArray<VectorGaussian,Vector>>(vVector__0_uses_B, vVector__0_F, this.vVector__0_marginal_F);
				// Message to 'vVector__0_uses' from UsesEqualDef factor
				vVector__0_uses_F[0] = UsesEqualDefGibbsOp<Vector[]>.UsesGibbs<DistributionRefArray<VectorGaussian,Vector>>(this.vVector__0_marginal_F, 0, vVector__0_uses_F[0]);
				for(int index0 = 0; index0<5000; index0++) {
					for(int index1 = 0; index1<99; index1++) {
						// Message to 'vVector__1_rep_uses' from InnerProduct factor
						vVector__1_rep_uses_B[index1][0][index0] = InnerProductOpBase.BAverageConditional(vdouble____0_B[index0][index1], vVector__0_uses_F[0][index0], vVector__1_rep_uses_B[index1][0][index0]);
					}
				}
				for(int index1 = 0; index1<99; index1++) {
					// Message to 'vVector__1_rep' from ReplicateWithMarginal factor
					vVector__1_rep_B[index1] = ReplicateGibbsOp<Vector[]>.DefGibbs<DistributionRefArray<VectorGaussian,Vector>>(vVector__1_rep_uses_B[index1], vVector__1_rep_B[index1]);
					// Message to 'vVector__1_uses' from Replicate factor
					this.vVector__1_uses_B[0][index1] = ReplicateOp_NoDivide.DefAverageConditional<VectorGaussian>(vVector__1_rep_B[index1], this.vVector__1_uses_B[0][index1]);
				}
				for(int index0 = 0; index0<5000; index0++) {
					for(int index1 = 0; index1<99; index1++) {
						// Message to 'vdouble____0' from InnerProduct factor
						vdouble____0_F[index0][index1] = Vector.InnerProduct(vVector__0_uses_F[0][index0], vVector__1_uses_F[0][index1]);
					}
				}
				// Message to 'vdouble____0_marginal' from ReplicateWithMarginal factor
				this.vdouble____0_marginal_F = ReplicateGibbsOp<double[][]>.MarginalGibbs<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(vdouble____0_F, this.vdouble____0_marginal_F);
				// Message to 'vdouble___0_marginal' from ReplicateWithMarginal factor
				this.vdouble___0_marginal_F = ReplicateGibbsOp<double[,]>.MarginalGibbs<DistributionStructArray2D<Gaussian,double>,double[,]>(this.vdouble___0, this.vdouble___0_marginal_F);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_numberOfIterations_vdouble___0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vdouble___0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vdouble___0(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vdouble___0_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vdouble___0_isInitialised)) {
				return ;
			}
			// Create array for 'vVector__0_marginal' Forwards messages.
			this.vVector__0_marginal_F = new GibbsMarginal<DistributionRefArray<VectorGaussian,Vector>,Vector[]>(this.vVector__0_marginal_B, 100, 5, true, true, false);
			for(int index1 = 0; index1<99; index1++) {
				this.vVector__1_uses_B[0][index1] = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
			}
			// Create array for 'vVector__1_marginal' Forwards messages.
			this.vVector__1_marginal_F = new GibbsMarginal<DistributionRefArray<VectorGaussian,Vector>,Vector[]>(this.vVector__1_marginal_B, 100, 5, true, true, false);
			// Create array for 'vdouble____0_marginal' Forwards messages.
			this.vdouble____0_marginal_F = new GibbsMarginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.vdouble____0_marginal_B, 100, 5, true, true, false);
			// Create array for 'vdouble___0_marginal' Forwards messages.
			this.vdouble___0_marginal_F = new GibbsMarginal<DistributionStructArray2D<Gaussian,double>,double[,]>(this.vdouble___0_marginal_B, 0, 5, true, true, false);
			this.Changed_numberOfIterationsDecreased_Init_vdouble___0_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vdouble___0_isInitialised = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			VectorGaussian vVector__0_marginal_B_reduced;
			this.vVector2 = DenseVector.FromArray(new double[10] { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 });
			vVector__0_marginal_B_reduced = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
			// Create array for 'vVector__0_marginal' Backwards messages.
			this.vVector__0_marginal_B = new DistributionRefArray<VectorGaussian,Vector>(5000);
			for(int index0 = 0; index0<5000; index0++) {
				this.vVector__0_marginal_B[index0] = vVector__0_marginal_B_reduced;
			}
			// Create array for 'vVector__1_uses' Backwards messages.
			this.vVector__1_uses_B = new DistributionRefArray<VectorGaussian,Vector>[1];
			// Create array for 'vVector__1_uses' Backwards messages.
			this.vVector__1_uses_B[0] = new DistributionRefArray<VectorGaussian,Vector>(99);
			VectorGaussian vVector__1_marginal_B_reduced;
			vVector__1_marginal_B_reduced = ArrayHelper.MakeUniform<VectorGaussian>(VectorGaussian.Uniform(this.vVector2.Count));
			// Create array for 'vVector__1_marginal' Backwards messages.
			this.vVector__1_marginal_B = new DistributionRefArray<VectorGaussian,Vector>(99);
			for(int index1 = 0; index1<99; index1++) {
				this.vVector__1_marginal_B[index1] = vVector__1_marginal_B_reduced;
			}
			Gaussian vdouble____0_marginal_B_reduced;
			vdouble____0_marginal_B_reduced = Gaussian.Uniform();
			// Create array for 'vdouble____0_marginal' Backwards messages.
			this.vdouble____0_marginal_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(5000);
			for(int index0 = 0; index0<5000; index0++) {
				// Create array for 'vdouble____0_marginal' Backwards messages.
				this.vdouble____0_marginal_B[index0] = new DistributionStructArray<Gaussian,double>(99);
				for(int index1 = 0; index1<99; index1++) {
					this.vdouble____0_marginal_B[index0][index1] = vdouble____0_marginal_B_reduced;
				}
			}
			Gaussian vdouble___0_marginal_B_reduced;
			vdouble___0_marginal_B_reduced = Gaussian.Uniform();
			// Create array for 'vdouble___0_marginal' Backwards messages.
			this.vdouble___0_marginal_B = new DistributionStructArray2D<Gaussian,double>(5000, 99);
			for(int index0 = 0; index0<5000; index0++) {
				for(int index1 = 0; index1<99; index1++) {
					this.vdouble___0_marginal_B[index0, index1] = vdouble___0_marginal_B_reduced;
				}
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vdouble___0_isDone = false;
				}
				this.Changed_numberOfIterations_vdouble___0_isDone = false;
			}
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_vdouble___0(initialise);
			this.Changed_numberOfIterations_vdouble___0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vdouble___0") {
				return this.vdouble___0;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble____0") {
				return this.Vdouble____0Marginal();
			}
			if (variableName=="vdouble___0") {
				return this.Vdouble___0Marginal();
			}
			if (variableName=="vVector__1") {
				return this.VVector__1Marginal();
			}
			if (variableName=="vVector__0") {
				return this.VVector__0Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="vdouble____0")&&(query=="Samples")) {
				return this.Vdouble____0Samples();
			}
			if ((variableName=="vdouble___0")&&(query=="Samples")) {
				return this.Vdouble___0Samples();
			}
			if ((variableName=="vVector__1")&&(query=="Samples")) {
				return this.VVector__1Samples();
			}
			if ((variableName=="vVector__0")&&(query=="Samples")) {
				return this.VVector__0Samples();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vdouble___0") {
				this.vdouble___0 = (double[,])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble____0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> Vdouble____0Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.vdouble____0_marginal_F.Distribution);
		}

		/// <summary>
		/// Returns the Samples for 'vdouble____0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<double[][]> Vdouble____0Samples()
		{
			return new List<double[][]>(this.vdouble____0_marginal_F.Samples);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble___0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray2D<Gaussian,double> Vdouble___0Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionStructArray2D<Gaussian,double>>(this.vdouble___0_marginal_F.Distribution);
		}

		/// <summary>
		/// Returns the Samples for 'vdouble___0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<double[,]> Vdouble___0Samples()
		{
			return new List<double[,]>(this.vdouble___0_marginal_F.Samples);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<VectorGaussian,Vector> VVector__0Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<VectorGaussian,Vector>>(this.vVector__0_marginal_F.Distribution);
		}

		/// <summary>
		/// Returns the Samples for 'vVector__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<Vector[]> VVector__0Samples()
		{
			return new List<Vector[]>(this.vVector__0_marginal_F.Samples);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<VectorGaussian,Vector> VVector__1Marginal()
		{
			return ArrayHelper.MakeCopy<DistributionRefArray<VectorGaussian,Vector>>(this.vVector__1_marginal_F.Distribution);
		}

		/// <summary>
		/// Returns the Samples for 'vVector__1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<Vector[]> VVector__1Samples()
		{
			return new List<Vector[]>(this.vVector__1_marginal_F.Samples);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
